BEGIN  
    INITIALIZE Trailing sets for E, T, F  
    CALL Compute_Trailing(E)  
    CALL Compute_Trailing(T)  
    CALL Compute_Trailing(F)  
    PRINT Trailing sets  
END  

FUNCTION Compute_Trailing(NON_TERMINAL X):  
    FOR each production rule X → α  
        IF α ends with a terminal symbol:  
            ADD α to TRAILING(X)  
        ELSE IF α ends with a non-terminal Y:  
            CALL Compute_Trailing(Y)  
            ADD TRAILING(Y) to TRAILING(X)  
        ELSE IF α ends with ‘)’:  
            ADD ‘)’ to TRAILING(X)  
END


#include<stdio.h>
char arr[18][3] = { {'E', '+', 'F'}, {'E', '*', 'F'}, {'E', '(', 'F'}, {'E', ')', 'F'}, {'E', 'i', 'F'},
 {'E', '$', 'F'}, {'F', '+', 'F'}, {'F', '*', 'F'}, {'F', '(', 'F'}, {'F', ')', 'F'}, {'F', 'i', 'F'},
 {'F', '$', 'F'}, {'T', '+', 'F'}, {'T', '*', 'F'}, {'T', '(', 'F'}, {'T', ')', 'F'}, {'T', 'i', 'F'},
 {'T', '$', 'F'} };

char prod[6] = "EETTFF";
char res[6][3] ={ {'E', '+', 'T'}, {'T', '\0', '\0'}, {'T', '*', 'F'}, {'F', '\0', '\0'}, {'(', 'E', ')'}, {'i', '\0', '\0'} };
char stack[5][2]; int top = -1;

void install(char pro, char re) {
    for (int i = 0; i < 18; ++i) {
        if (arr[i][0] == pro && arr[i][1] == re) {
            arr[i][2] = 'T'; 
            stack[++top][0] = pro; 
            stack[top][1] = re; 
            break;
        }
    }
}

int main() {
    int i, j; char pro, re, pri = ' ';

    for (i = 0; i < 6; ++i) {
        for (j = 2; j >= 0; --j) {
            if (strchr("+*()i$", res[i][j])) {
                install(prod[i], res[i][j]); 
                break;
            } else if (strchr("EFT", res[i][j]) && strchr("+*()i$", res[i][j - 1])) {
                install(prod[i], res[i][j - 1]); 
                break;
            }
        }
    }

    while (top >= 0) {
        pro = stack[top][0]; re = stack[top--][1];
        for (i = 0; i < 6; ++i) {
            if (res[i][0] == pro && res[i][0] != prod[i]) install(prod[i], re);
        }
    }

    for (i = 0; i < 18; ++i) {
        printf("\n\t");
        for (j = 0; j < 3; ++j) printf("%c\t", arr[i][j]);
    }

    printf("\n\n");
    for (i = 0; i < 18; ++i) {
        if (pri != arr[i][0]) {
            pri = arr[i][0]; 
            printf("\n\t%c -> ", pri);
        }
        if (arr[i][2] == 'T') printf("%c ", arr[i][1]);
    }
}





E + F
E * F
E ( F
E ) F
E i F
E $ F
F + F
F * F
F ( F
F ) F
F i F
F $ F
T + F
T * F
T ( F
T ) F
T i F
T $ F

E -> + * ) i
F -> ) i
T -> * ) i

