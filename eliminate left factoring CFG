BEGIN
    READ production rule in the form of a string
    EXTRACT first production option (before '|')
    EXTRACT second production option (after '|')
    
    FIND the longest common prefix of both options
    IF common prefix exists:
        REPLACE original production with:
            S → common_prefix X
        DEFINE X as:
            X → remaining_part1 | remaining_part2
    
    DISPLAY transformed grammar
END


  #include <stdio.h>
#include <string.h>

int main() {
    char gram[20], part1[20], part2[20], modifiedGram[20], newGram[20];
    int i, j = 0, k = 0, pos;

    printf("Enter Production: S->");
    gets(gram);

    for (i = 0; gram[i] != '|'; i++, j++)
        part1[j] = gram[i];
    part1[j] = '\0';

    for (j = ++i, i = 0; gram[j] != '\0'; j++, i++)
        part2[i] = gram[j];
    part2[i] = '\0';

    for (i = 0; part1[i] == part2[i]; i++) {
        modifiedGram[k++] = part1[i];
        pos = i + 1;
    }

    modifiedGram[k++] = 'X';
    modifiedGram[k] = '\0';

    for (i = pos, j = 0; part1[i] != '\0'; i++, j++)
        newGram[j] = part1[i];

    newGram[j++] = '|';

    for (i = pos; part2[i] != '\0'; i++, j++)
        newGram[j] = part2[i];

    newGram[j] = '\0';

    printf("\nS->%s", modifiedGram);
    printf("\nX->%s\n", newGram);

    return 0;
}



Enter Production: S->iEtS|iEtSeS|a

S->iEtSX
X->|eS|a

